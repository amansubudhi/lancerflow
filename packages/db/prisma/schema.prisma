generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  email                 String                  @unique
  name                  String?
  password              String?
  provider              AuthProvider            @default(LOCAL)
  providerId            String?                 @unique
  flows                 Flow[]
  invoices              Invoice[]
  connectedAccounts     ConnectedAccount[]
  createdAt             DateTime                @default(now())
  refreshTokens         RefreshToken?
  processedEmailMesages ProcessedEmailMessage[]
}

model ConnectedAccount {
  id           Int       @id @default(autoincrement())
  userId       Int
  provider     String
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  email        String
  scope        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
  triggers     Trigger[]
}

model RefreshToken {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  refreshTokenHash String
  expiresAt        DateTime
  user             User     @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
  updateAt         DateTime @updatedAt
}

model Flow {
  id        String    @id @default(uuid())
  userId    Int
  name      String
  trigger   Trigger?
  actions   Action[]
  flowRuns  FlowRun[]
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
}

model AvailableTrigger {
  id          String       @id @default(uuid())
  name        String
  image       String?
  triggerType TriggerType? @unique
  triggers    Trigger[]
}

model Trigger {
  id                    String                  @id @default(uuid())
  flowId                String                  @unique
  availableTriggerId    String
  metadata              Json                    @default("{}")
  connectedAccountId    Int?
  isActive              Boolean                 @default(true)
  processedGmailMessage ProcessedEmailMessage[]
  type                  AvailableTrigger        @relation(fields: [availableTriggerId], references: [id])
  flow                  Flow                    @relation(fields: [flowId], references: [id])
  connectedAccount      ConnectedAccount?       @relation(fields: [connectedAccountId], references: [id])
}

model AvailableAction {
  id         String     @id @default(uuid())
  name       String
  image      String?
  actions    Action[]
  actionType ActionType @unique
}

model Action {
  id                String          @id @default(uuid())
  flowId            String
  flow              Flow            @relation(fields: [flowId], references: [id])
  availableActionId String
  metadata          Json            @default("{}")
  sortingOrder      Int             @default(0)
  type              AvailableAction @relation(fields: [availableActionId], references: [id])
}

model FlowRun {
  id            String         @id @default(uuid())
  flowId        String
  metadata      Json?
  flow          Flow           @relation(fields: [flowId], references: [id])
  flowRunOutBox FlowRunOutbox?
  createdAt     DateTime       @default(now())
  logs          Log[]
}

model FlowRunOutbox {
  id        String  @id @default(uuid())
  flowRunId String  @unique
  flowRun   FlowRun @relation(fields: [flowRunId], references: [id])
}

model Invoice {
  id          String          @id @default(uuid())
  provider    InvoiceProvider
  providerId  String          @unique
  userId      Int
  clientEmail String
  amountDue   Float
  status      InvoiceStatus
  createdAt   DateTime        @default(now())
  user        User            @relation(fields: [userId], references: [id])
  approval    Approval[]
}

// Logs (Error & Activity Logs)
model Log {
  id        String   @id @default(uuid())
  flowRunId String?
  flowRun   FlowRun? @relation(fields: [flowRunId], references: [id])
  level     String // "info", "warning", "error"
  message   String
  metadata  Json?
  createdAt DateTime @default(now())
}

// Approval (For tracking invoice approval status)
model Approval {
  id         String         @id @default(uuid())
  invoiceId  String
  invoice    Invoice        @relation(fields: [invoiceId], references: [id])
  status     ApprovalStatus
  reviewedBy String?
  reviewedAt DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model ProcessedEmailMessage {
  id        String   @id @default(uuid())
  triggerId String
  userId    Int
  messageId String
  createdAt DateTime @default(now())
  trigger   Trigger  @relation(fields: [triggerId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([triggerId, messageId])
}

enum AuthProvider {
  LOCAL
  GOOGLE
}

enum TriggerType {
  GMAIL_LABEL
  CRON
  WEBHOOK
}

enum ActionType {
  EMAIL
  INVOICE
  DELAY
  WEBHOOK
  NOTIFICATION
}

enum InvoiceProvider {
  STRIPE
  PAYPAL
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  UNCOLLECTIBLE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
