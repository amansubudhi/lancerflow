generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  name               String?
  password           String?
  provider           AuthProvider       @default(LOCAL)
  providerId         String?            @unique
  testimonialFormUrl String?
  flows              Flow[]
  invoices           Invoice[]
  connectedAccounts  ConnectedAccount[]
  createdAt          DateTime           @default(now())
  refreshToken       RefreshToken?
  clients            Client[]
}

model ConnectedAccount {
  id           Int       @id @default(autoincrement())
  userId       Int
  provider     Provider
  type         Authtype
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  apiKey       String?
  email        String?
  scope        String?
  config       Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
  triggers     Trigger[]
}

model RefreshToken {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  refreshTokenHash String
  expiresAt        DateTime
  user             User     @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Flow {
  id        String    @id @default(uuid())
  userId    Int
  name      String
  trigger   Trigger?
  actions   Action[]
  flowRuns  FlowRun[]
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model AvailableTrigger {
  id          String       @id @default(uuid())
  name        String
  image       String?
  triggerType TriggerType? @unique
  triggers    Trigger[]
}

model Trigger {
  id                 String            @id @default(uuid())
  flowId             String            @unique
  availableTriggerId String
  metadata           Json              @default("{}")
  connectedAccountId Int?
  isActive           Boolean           @default(true)
  type               AvailableTrigger  @relation(fields: [availableTriggerId], references: [id])
  flow               Flow              @relation(fields: [flowId], references: [id])
  connectedAccount   ConnectedAccount? @relation(fields: [connectedAccountId], references: [id])
}

model AvailableAction {
  id         String     @id @default(uuid())
  name       String
  image      String?
  actions    Action[]
  actionType ActionType @unique
}

model Action {
  id                String          @id @default(uuid())
  flowId            String
  flow              Flow            @relation(fields: [flowId], references: [id])
  availableActionId String
  metadata          Json            @default("{}")
  sortingOrder      Int             @default(0)
  type              AvailableAction @relation(fields: [availableActionId], references: [id])
}

model FlowRun {
  id            String         @id @default(uuid())
  flowId        String
  clientId      Int?
  metadata      Json?
  client        Client?        @relation(fields: [clientId], references: [id])
  flow          Flow           @relation(fields: [flowId], references: [id])
  flowRunOutBox FlowRunOutbox?
  createdAt     DateTime       @default(now())
  logs          Log[]
  invoice       Invoice?
}

model FlowRunOutbox {
  id        String  @id @default(uuid())
  flowRunId String  @unique
  flowRun   FlowRun @relation(fields: [flowRunId], references: [id])
}

model Client {
  id                   Int       @id @default(autoincrement())
  userId               Int
  name                 String
  email                String
  companyName          String?
  phone                String?
  notes                String?
  deadline             DateTime
  services             Json?
  testimonialRequested Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id])
  invoices             Invoice[]
  flowRuns             FlowRun[]
}

model Invoice {
  id             String        @id @default(uuid())
  invoiceNumber  Int           @unique @default(autoincrement())
  userId         Int
  clientId       Int
  services       Json?
  clientsnapshot Json?
  amountDue      Float
  status         InvoiceStatus
  pdfUrl         String?
  sentEmailId    String?
  followUpSent   Boolean       @default(false)
  flowRunId      String?       @unique
  createdAt      DateTime      @default(now())
  user           User          @relation(fields: [userId], references: [id])
  client         Client        @relation(fields: [clientId], references: [id])
  flowRun        FlowRun?      @relation(fields: [flowRunId], references: [id])
  approval       Approval[]
}

// Logs (Error & Activity Logs)
model Log {
  id        String   @id @default(uuid())
  flowRunId String?
  flowRun   FlowRun? @relation(fields: [flowRunId], references: [id])
  level     String // "info", "warning", "error"
  message   String
  metadata  Json?
  createdAt DateTime @default(now())
}

// Approval (For tracking invoice approval status)
model Approval {
  id         String         @id @default(uuid())
  invoiceId  String?
  invoice    Invoice?       @relation(fields: [invoiceId], references: [id])
  status     ApprovalStatus
  reviewedBy String?
  reviewedAt DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

enum AuthProvider {
  LOCAL
  GOOGLE
}

// For connected Accounts

enum Provider {
  TOGGL
  GMAIL
  NOTION
  STRIPE
  OTHER
}

enum Authtype {
  OAUTH
  API_KEY
  WEBHOOK
  NONE
}

enum TriggerType {
  CLIENT_ONBOARDING
  SCHEDULE
  WEBHOOK
}

enum ActionType {
  EMAIL
  INVOICE
  DELAY
  NOTIFICATION
  TOGGL
}

enum InvoiceStatus {
  DRAFT
  READY
  SENT
  PAID
  PARTIALLY_PAID
  CANCELLED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
